package io.bonitoo.qa.plugin.item;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;
import io.bonitoo.qa.conf.data.ItemConfig;
import io.bonitoo.qa.conf.data.ItemConfigRegistry;
import io.bonitoo.qa.conf.data.ItemPluginConfig;
import io.bonitoo.qa.conf.data.SampleConfig;
import io.bonitoo.qa.data.Item;
import io.bonitoo.qa.plugin.*;
import io.bonitoo.qa.plugin.eg.*;
import io.bonitoo.qa.plugin.item.ItemPluginMill;
import io.bonitoo.qa.plugin.util.JarTool;
import org.junit.jupiter.api.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.File;
import java.io.IOException;
import java.io.StringReader;
import java.lang.invoke.MethodHandles;
import java.lang.reflect.InvocationTargetException;
import java.util.Properties;
import java.util.jar.JarOutputStream;

import static org.junit.jupiter.api.Assertions.*;

@Tag("intg")
public class ItemGenPluginTest {

  // TODO add test of ItemPluginType with array of items

  static Logger logger = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());

  private static final String DEFAULT_VALUE = "Foo";
  private static final File pluginDir = new File("src/test/plugins");
  private static final String testJarName = pluginDir.getPath() + "/itemPluginTest.jar";

  @BeforeAll
  public static void createJar() throws IOException {
    // Start by creating a simple plugin jar
    if(!pluginDir.exists()){
      if(!pluginDir.mkdirs()){
        throw new RuntimeException("Failed to make dir " + pluginDir);
      };
    }

    JarTool jTool = new JarTool();
    jTool.startManifest();
    jTool.addToManifest("Main-Class", CounterItemPlugin.class.getName());
    JarOutputStream target = jTool.openJar(testJarName);

    logger.debug(String.format("Path replacements %s.class", CounterItemPlugin.class.getName().replace(".", "/")));

    jTool.addFile(target, System.getProperty("user.dir")
        + "/target/test-classes",
      System.getProperty("user.dir")
        + "/target/test-classes/" + CounterItemPlugin.class.getName().replace(".", "/") + ".class");

    jTool.addRenamedFile(target, System.getProperty("user.dir")
        + "/src/test/resources",
      System.getProperty("user.dir")
        + "/src/test/resources/counterItemPlugin.props",
      "plugin.props"
    );

    target.close();
  }

  @AfterAll
  public static void cleanUp(){
    File pluginFile = new File(testJarName);
    pluginFile.deleteOnExit();
    pluginDir.deleteOnExit();
  }

  @AfterEach
  public void cleanUpDynamic(){
    // N.B. removes from registry, but loaded class remains until garbage collected
    ItemPluginMill.pluginPackMap.remove("CounterItemPlugin");
  }

  @Test
  public void createEmptyItemPluginTest(){
    PluginProperties props = new PluginProperties(EmptyItemGenPlugin.class.getName(),
      "Test Item Plugin",
      "val",
      "A Test Plugin",
      "0.0.1",
      PluginType.Item,
      PluginResultType.String,
      new Properties()
      );
    ItemPluginConfig itemConfig = new ItemPluginConfig(props, props.getName() + "Conf");
    // EmptyItemGenPlugin plugin = new EmptyItemGenPlugin(props, itemConfig, false);
   // plugin.setItem(Item.of(itemConfig));
    // Use plugin instance generated by factory - however this will not have properties set...
    EmptyItemGenPlugin plugin = (EmptyItemGenPlugin) Item.of(itemConfig, props).getGenerator();
    //plugin.setProps(props);
    assertEquals(EmptyItemGenPlugin.class.getName(), plugin.getItemConfig().getGenClassName());
    assertEquals(props.getName(), ((ItemPluginConfig) plugin.getItemConfig()).getPluginName());
   // assertEquals(props.getDescription(), plugin.getDescription());
   // assertEquals(props.getVersion(), plugin.getVersion());
    assertFalse(plugin.isEnabled());
    assertEquals(itemConfig, plugin.getDataConfig());
    plugin.onLoad();
    assertNull(plugin.genData());
    assertTrue(plugin.onEnable());
    assertTrue(plugin.isEnabled());
    //assertEquals(DEFAULT_VALUE + ":", plugin.genData());
    assertEquals(DEFAULT_VALUE, plugin.genData());
   // assertEquals("Foo:A3.14B7", plugin.genData('A', 3.14, 'B', '7'));
    assertEquals(PluginType.Item, plugin.getType());
    assertEquals(PluginResultType.String, plugin.getResultType());
    assertFalse(plugin.onDisable());
    assertFalse(plugin.isEnabled());
  }

  // N.B. test relies on resource/counterItemPlugin.props
  @Test
  public void itemPluginLoadTest() throws IOException {

    String pluginName = "CounterItemPlugin";

    File pluginFile = new File(testJarName);

    try {
      Class<? extends Plugin> clazz = PluginLoader.loadPlugin(pluginFile);
      assertTrue(ItemPluginMill.pluginPackMap.containsKey(pluginName));
      ItemPluginConfig conf = new ItemPluginConfig(ItemPluginMill.getPluginProps(pluginName), pluginName+"Conf");
      CounterItemPlugin counterPlugin = (CounterItemPlugin) ItemPluginMill.genNewInstance(pluginName, conf);
      assertEquals("CounterItemPlugin", counterPlugin.getPropsName());
      assertEquals(CounterItemPlugin.class.getName(), counterPlugin.getMain());
      assertEquals("0.1", counterPlugin.getVersion());
      assertEquals(1, counterPlugin.genData());
      assertEquals(2, counterPlugin.genData());
     // assertEquals(7, counterPlugin.genData(5));
      assertEquals(counterPlugin.getPluginName() + "Conf", counterPlugin.getDataConfig().getName());
      assertTrue(ItemPluginMill.pluginPackMap.containsKey(((ItemPluginConfig)counterPlugin.getDataConfig()).getPluginName()));
      assertTrue(ItemConfigRegistry.keys().contains(counterPlugin.getDataConfig().getName()));
    } catch (InstantiationException | IllegalAccessException | ClassNotFoundException | InvocationTargetException |
             NoSuchMethodException | PluginConfigException | NoSuchFieldException e) {
      throw new RuntimeException(e);
    }
  }

  @Test
  public void itemPluginDeserializeTest()
    throws IOException, ClassNotFoundException, PluginConfigException,
    InvocationTargetException, NoSuchMethodException, InstantiationException,
    IllegalAccessException, NoSuchFieldException {

    String pluginName = "CounterItemPlugin";

    File pluginFile = new File(testJarName);
    Class<? extends Plugin> clazz = PluginLoader.loadPlugin(pluginFile);
    assertTrue(ItemPluginMill.pluginPackMap.containsKey(pluginName));
    PluginProperties props = ItemPluginMill.getPluginProps(pluginName);

    String localYamlConf = "---\n" +
      "name: \"plugin01\"\n" +
      "type: \"Plugin\"\n" +
      "label: \"ct\"\n" +
      "pluginName: \"" + props.getName() + "\"\n" +
      "resultType: \"" + props.getResultType() + "\"";

    ObjectMapper om = new ObjectMapper(new YAMLFactory());

    ItemConfig confPlugin = om.readValue(localYamlConf, ItemPluginConfig.class);
    CounterItemPlugin counterPlugin = (CounterItemPlugin) ItemPluginMill.genNewInstance(pluginName,
      (ItemPluginConfig) confPlugin);
    assertEquals("CounterItemPlugin", counterPlugin.getPropsName());
    assertEquals(confPlugin, counterPlugin.getDataConfig());

    counterPlugin.getItem().update();

    assertEquals(1L, counterPlugin.getItem().asLong());
    assertEquals(2L, counterPlugin.getItem().update().asLong());
    assertEquals(3L, counterPlugin.getItem().update().asLong());

  }

  @Test
  public void itemPluginWithPrecPropTest() throws JsonProcessingException {

    Properties additional = new Properties();
    additional.setProperty("plugin.decimal.prec", "3");
    PluginProperties props = new PluginProperties(PiItemGenPlugin.class.getName(),
      "PiTestItemPlugin",
      "val",
      "A Test Plugin",
      "0.0.1",
      PluginType.Item,
      PluginResultType.Double,
      additional
    );

    ItemPluginConfig conf = new ItemPluginConfig(props,props.getName() + "01");
    //plugin.setDataConfig(new ItemPluginConfig(props,props.getName() + "01"));
    //PiItemGenPlugin plugin = new PiItemGenPlugin(props, conf, true);
    // Use plugin created in factory - it will already have internal item created
    PiItemGenPlugin plugin = (PiItemGenPlugin) Item.of(conf, props).getGenerator();
    //plugin.setProps(props);

    //Item item = Item.of(conf);
   // plugin.setItem(Item.of(conf));
    plugin.onLoad();

    ObjectWriter ow = new ObjectMapper().writer();

    String val = ow.writeValueAsString(plugin.getItem());

    assertEquals(3.141, Double.parseDouble(val));
    assertEquals(Math.PI, plugin.getItem().asDouble());

  }

  // verify that prec from config file has precedence
  @Test
  public void itemPluginWithPrecConfTest() throws JsonProcessingException {

    Properties additional = new Properties();
    additional.setProperty("plugin.decimal.prec", "2");
    PluginProperties props = new PluginProperties(PiItemGenPlugin.class.getName(),
      "PiTestItemPlugin",
      "val",
      "A Test Plugin",
      "0.0.1",
      PluginType.Item,
      PluginResultType.Double,
      additional
    );

    ItemPluginConfig conf = new ItemPluginConfig(props, props.getName() + "01");
    conf.setPrec(4);

    // Use plugin created in factory - it will already have internal item created
    PiItemGenPlugin plugin = (PiItemGenPlugin) Item.of(conf, props).getGenerator();
    plugin.onLoad();

    ObjectWriter ow = new ObjectMapper().writer();

    String val = ow.writeValueAsString(plugin.getItem());

    assertEquals(3.1415, Double.parseDouble(val));
    assertEquals(Math.PI, plugin.getItem().asDouble());

  }


  @Test
  public void itemPluginLiteralWithPrecTest() throws IOException, PluginConfigException {

    String pluginPropsStr = "plugin.main=" + PiItemGenPlugin.class.getName() + "\n" +
      "plugin.name=PiItemPlugin\n" +
      "plugin.description=A Test plugin return Math.PI\n" +
      "plugin.version=0.1\n" +
      "plugin.type=Item\n" +
      "plugin.label=pi\n" +
      "plugin.resultType=Double\n" +
      "plugin.decimal.prec=3";

    Properties rawProps = new Properties();
    rawProps.load(new StringReader(pluginPropsStr));
    PluginProperties props = new PluginProperties(rawProps);

    ItemPluginConfig itemConfig = new ItemPluginConfig(props,props.getName() + "01");
    PiItemGenPlugin plugin = (PiItemGenPlugin) Item.of(itemConfig, props).getGenerator();

    plugin.onLoad();

    ObjectWriter ow = new ObjectMapper().writer();

    String val = ow.writeValueAsString(plugin.getItem());

    assertEquals(3.141, Double.parseDouble(val));
    assertEquals(Math.PI, plugin.getItem().asDouble());

  }

  @Test
  public void ItemGenPluginConfigTest() throws JsonProcessingException {

    PluginProperties props = new PluginProperties(MovingAveragePlugin.class.getName(),
      "TestMovingAverageItemPlugin",
      "avgProp",
      "A Test Plugin",
      "0.0.1",
      PluginType.Item,
      PluginResultType.Double,
      new Properties()
    );

    ItemPluginMill.addPluginClass(props.getName(), MovingAveragePlugin.class, props);

    ObjectMapper omy = new ObjectMapper(new YAMLFactory());

    String confName = "FooConf";
    String confLabel = "blahBlahBlah";
    String confType = "Plugin";
    int confWindow = 5;

    String mavgConfString = "---\n" +
      "name: \"" + confName + "\"\n" +
      "label: \"" + confLabel + "\"\n" +
      "type: \"" + confType + "\"\n" +
      "genClassName: \"io.bonitoo.qa.plugin.eg.SampleAveragePlugin\"\n" +
      "updateArgs:\n" +
      "- \"window\"\n" +
      "pluginName: \"TestMovingAverageItemPlugin\"\n" +
      "resultType: \"Double\"\n" +
      "window: " + confWindow;

    MovingAveragePluginConf sampleConf = omy.readValue(mavgConfString, MovingAveragePluginConf.class);

    ObjectWriter ow = omy.writer().withDefaultPrettyPrinter();

    assertEquals(confName, sampleConf.getName());
    assertEquals(confLabel, sampleConf.getLabel());
    assertEquals(confType, sampleConf.getType().toString());
    assertEquals(confWindow, sampleConf.getWindow());

  }

  @Test
  public void ItemGenPluginInSampleConfTest() throws JsonProcessingException {

    String confName = "testConf";
    String confLabel = "wumpus";
    int confWindow = 7;
    double confMin = 11.1;
    double confMax = 33.3;

    PluginProperties props = new PluginProperties(MovingAveragePlugin.class.getName(),
      "TestMovingAverageItemPlugin",
      "avg",
      "A Test Plugin",
      "0.0.1",
      PluginType.Item,
      PluginResultType.Double,
      new Properties()
    );

    ItemPluginMill.addPluginClass(props.getName(), MovingAveragePlugin.class, props);

    String mavgConfSampleString = "---\n" +
      "name: \"sampleTestConf\"\n" +
      "id: \"random\"\n" +
      "topic: \"test/kavka\"\n" +
      "items:\n" +
      " - name: \"" + confName + "\"\n" +
      "   label: \"" + confLabel + "\"\n" +
      "   type: \"Plugin\"\n" +
      "   pluginName: \"" + props.getName() + "\"\n" +
      "   resultType: \"Double\"\n" +
      "   window: " + confWindow + "\n" +
      "   min: " + confMin + "\n" +
      "   max: " + confMax + "\n";

    ObjectMapper omy = new ObjectMapper(new YAMLFactory());

    SampleConfig sampConf = omy.readValue(mavgConfSampleString, SampleConfig.class);

    assertEquals(1, sampConf.getItems().size());

    ItemConfig iConf = sampConf.getItems().get(0);
    assertEquals(MovingAveragePlugin.class.getName(), iConf.getGenClassName());
    assertEquals(confName, iConf.getName());
    assertEquals(confLabel, iConf.getLabel());
    assertEquals(props.getName(), ((ItemPluginConfig)iConf).getPluginName());
    assertEquals(confWindow, ((MovingAveragePluginConf)iConf).getWindow());
    assertEquals(confMin, ((MovingAveragePluginConf)iConf).getMin());
    assertEquals(confMax, ((MovingAveragePluginConf)iConf).getMax());
  }

}
